// 1. JavaScript Basics & Setup
console.log("Welcome to the Community Portal");
window.addEventListener("load", () => {
  alert("Page is fully loaded");
});

// 2. Syntax, Data Types, and Operators
const eventName = "Music Fest";
const eventDate = "2025-06-10";
let availableSeats = 100;
console.log(`Event: ${eventName} | Date: ${eventDate} | Seats: ${availableSeats}`);

// 3. Conditionals, Loops, and Error Handling
const events = [
  { name: "Music Fest", date: "2025-06-10", seats: 10, category: "music" },
  { name: "Food Carnival", date: "2025-07-05", seats: 0, category: "food" },
  { name: "Old Event", date: "2023-01-01", seats: 20, category: "history" }
];

function isFuture(dateStr) {
  return new Date(dateStr) > new Date();
}

function displayValidEvents() {
  events.forEach(event => {
    if (isFuture(event.date) && event.seats > 0) {
      console.log(`Upcoming: ${event.name} on ${event.date} with ${event.seats} seats`);
    }
  });
}

try {
  displayValidEvents();
} catch (error) {
  console.error("Error displaying events", error);
}

// 4. Functions, Scope, Closures, Higher-Order Functions
function addEvent(newEvent) {
  events.push(newEvent);
}

function registerUser(eventName) {
  const event = events.find(e => e.name === eventName);
  if (event && event.seats > 0) {
    event.seats--;
    console.log(`Registered for ${event.name}. Seats left: ${event.seats}`);
  } else {
    console.log("Cannot register.");
  }
}

function filterEventsByCategory(category) {
  return events.filter(event => event.category === category);
}

function registrationTracker() {
  let total = 0;
  return function () {
    total++;
    return total;
  };
}
const trackMusic = registrationTracker();

// 5. Objects and Prototypes
function Event(name, date, seats) {
  this.name = name;
  this.date = date;
  this.seats = seats;
}

Event.prototype.checkAvailability = function () {
  return this.seats > 0;
};

const concert = new Event("Jazz Night", "2025-08-01", 30);
console.log(Object.entries(concert));

// 6. Arrays and Methods
const eventArray = [];
eventArray.push("Workshop on Baking");
console.log(eventArray.filter(e => e.includes("Workshop")));
console.log(eventArray.map(e => `Event: ${e}`));

// 7. DOM Manipulation
document.addEventListener("DOMContentLoaded", () => {
  const eventsSection = document.querySelector("#events");
  events.forEach(event => {
    if (isFuture(event.date)) {
      const card = document.createElement("div");
      card.innerHTML = `<h4>${event.name}</h4><p>${event.date}</p>`;
      eventsSection.appendChild(card);
    }
  });
});

// 8. Event Handling
document.querySelectorAll("button").forEach(btn => {
  btn.onclick = () => console.log("Button clicked");
});

document.querySelector("#event")?.addEventListener("change", (e) => {
  console.log("Selected category:", e.target.value);
});

document.addEventListener("keydown", (e) => {
  if (e.key === "Enter") console.log("Enter pressed");
});

// 9. Async JS, Promises, Async/Await
async function fetchEvents() {
  try {
    document.body.insertAdjacentHTML("afterbegin", "<p>Loading...</p>");
    const res = await fetch("https://jsonplaceholder.typicode.com/posts");
    const data = await res.json();
    console.log("Mock events loaded", data.slice(0, 3));
  } catch (err) {
    console.error("Failed to fetch events", err);
  }
}
fetchEvents();

// 10. Modern JavaScript Features
const defaultEvent = (name = "Default", date = "TBD") => ({ name, date });
const { name, date } = defaultEvent();
const copiedEvents = [...events];

// 11. Working with Forms
const form = document.getElementById("registerForm");
form?.addEventListener("submit", (e) => {
  e.preventDefault();
  const { name, email, event: eventSelect } = form.elements;
  if (!name.value || !email.value) {
    alert("Please fill out all fields.");
    return;
  }
  console.log(`User: ${name.value}, Email: ${email.value}, Event: ${eventSelect.value}`);
});

// 12. AJAX & Fetch API
function sendRegistration(data) {
  fetch("https://jsonplaceholder.typicode.com/posts", {
    method: "POST",
    body: JSON.stringify(data),
    headers: { "Content-type": "application/json; charset=UTF-8" }
  })
    .then(res => res.json())
    .then(json => {
      console.log("Submitted", json);
      setTimeout(() => alert("Submission received!"), 1000);
    })
    .catch(err => console.error("Submission failed", err));
}

// 13. Debugging and Testing
function debugRegistration() {
  console.log("Attempting registration...");
  try {
    sendRegistration({ user: "DebugUser", event: "DebugEvent" });
  } catch (e) {
    console.error("Error occurred", e);
  }
}
debugRegistration();

// 14. jQuery and JS Frameworks
// Include jQuery via CDN in HTML: <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
$(document).ready(function () {
  $("#registerBtn").click(() => {
    console.log("jQuery register clicked");
  });
  $(".event-gallery img").fadeIn();
});
